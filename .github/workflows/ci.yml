name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm install --workspaces

    - name: Type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run linter
      working-directory: ./frontend
      run: npm run lint

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:ci
      env:
        CI: true
        NODE_ENV: test

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
        
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: p360_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6503:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm install --workspaces

    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate

    - name: Type check
      working-directory: ./backend
      run: npm run type-check

    - name: Run linter
      working-directory: ./backend
      run: npm run lint

    - name: Run tests
      working-directory: ./backend
      run: npm run test:ci
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:6503/p360_test
        JWT_SECRET: test-secret-key
        NODE_ENV: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm install --workspaces

    - name: Run security audit
      run: |
        npm audit --audit-level moderate || echo "Audit completed with warnings"
        npm audit --audit-level moderate --workspaces || echo "Workspace audit completed with warnings"

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm install --workspaces

    - name: Generate Prisma Client
      working-directory: ./backend
      run: npx prisma generate

    - name: Build applications
      run: |
        npm run build:frontend
        npm run build:backend

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "This will be configured when we set up deployment infrastructure"
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "ðŸ“§ Deployment notification would be sent here"
