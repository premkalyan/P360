---
description: P360 Enterprise Development Rules - SDLC with MCP Integration
globs:
alwaysApply: true
---

# P360 Development Rules - Enterprise SDLC
# =======================================

## üéØ MANDATORY SDLC PROCESS - COMPLETE CYCLE REQUIRED
‚ö†Ô∏è  **CRITICAL**: NEVER close JIRA stories until ALL steps are complete!

### **üìã Complete SDLC Cycle (NO SHORTCUTS)**
1. **üìù Story ‚Üí In Progress** (JIRA transition)
2. **üíª Implementation** (Development work)
3. **üß™ Testing** (Unit + Integration + E2E tests)
4. **üì§ PR Creation** (Agent creates PR using git/GitHub CLI commands)
5. **üîç MCP-Assisted Review** (Complete 5-phase review workflow with P360-specific context)
6. **üîÑ Feedback Incorporation** (Address review comments)
7. **‚úÖ Git Actions Success** (All CI/CD checks pass)
8. **üîÄ Branch Merge** (HUMAN ONLY - AI agents NEVER merge PRs)
9. **üéØ Story ‚Üí Done** (ONLY after merge complete)

### **‚ùå NEVER DO THIS:**
- Close JIRA stories after development only
- Skip testing phases
- Merge without PR review
- Transition to Done before branch merge
- **AI agents NEVER merge PRs - HUMAN ONLY ACTION**
- Skip any phase of the 5-phase MCP review workflow

### **‚úÖ ALWAYS DO THIS:**
- **NEVER start coding without a JIRA story**
- Use MCP tools for JIRA, Confluence, Kiwi-TCMS integration
- Update story status throughout ENTIRE development cycle
- Keep stories open until merge is complete
- **Complete ALL 5 phases of MCP review process**
- **Act as developer with highest standards**: quality, maintainability, security, performance, extensibility

## üìä ENVIRONMENT ARCHITECTURE (3-Tier)
```bash
Local Dev:  Frontend 6600 ‚Üî Backend 6601 (NODE_ENV=development)
UAT:        Frontend 6500 ‚Üî Backend 6501 (NODE_ENV=production) 
QA/CI:      Frontend 6700 ‚Üî Backend 6701 (NODE_ENV=test)
```

## üóÑÔ∏è DATABASE STRATEGY (Prisma + PostgreSQL)
```typescript
// Always design schema FIRST, then implement features
// Use Prisma migrations for all schema changes
// Environment-specific databases: p360_dev, p360_prod, p360_test
// Backend port configuration: environment-aware defaults in src/index.js
```

## üîÑ GIT WORKFLOW
```bash
# Branch naming: {type}/P360-{number}-{description}
feature/P360-109-campaign-database-schema
bugfix/P360-106-figma-design-system

# Commit format: P360-{number}: {summary}
# Git operations: Use brief, essential messages only
```

## üß™ TESTING STRATEGY
- **Unit tests**: Every component (ComponentName.test.tsx)
- **Integration tests**: Page workflows (PageName.test.tsx) 
- **E2E tests**: Critical user journeys (Playwright)
- **Kiwi-TCMS**: Link all tests to test management system

## üì± COMPONENT ARCHITECTURE
```typescript
// P360 Component Pattern
export interface ComponentProps { /* TypeScript types */ }
export const ComponentName: React.FC<ComponentProps> = ({ props }) => {
  return <div className="p360-component-class">{/* content */}</div>;
};
export default ComponentName;
```

## üöÄ MCP TOOLS (Essential Commands)
```typescript
// JIRA Management
mcp_jira-orengrinker_search_issues         // Find stories
mcp_jira-orengrinker_get_issue_details     // Get requirements  
mcp_jira-orengrinker_transition_issue      // Update status
mcp_jira-orengrinker_add_comment          // Progress updates

// PR Management (Agent-Driven) - COMPLETE PROCESS REQUIRED
gh pr create --title "..." --body "..." --base main  // Create PR via CLI

// OPTION 1: Complete 5-Phase Workflow (Single Tool)
mcp_pr-agent-mcp_pr_complete_workflow({
  pr_url: "...",
  quality_threshold: 7,                   // P360 quality gate (7/10 minimum)
  extended_analysis: true,                // Thorough technical analysis
  extra_instructions: "P360 Enterprise SDLC Review: Focus on Prisma schema design, database performance, Next.js/React best practices, TypeScript type safety, security (authentication, data protection), Docker deployment readiness, test coverage (unit/integration/E2E), Figma design system compliance, campaign feature extensibility, and multi-tenant architecture. Verify compliance with P360 port allocation (6600/6601, 6500/6501, 6700/6701) and environment separation.",
  workflow_steps: ["describe", "review", "analyze", "improve"]
})

// OPTION 2: Manual 5-Phase Process (Individual Tools)
// PHASE 1: mcp_pr-agent-mcp_pr_describe              // Documentation
// PHASE 2: mcp_pr-agent-mcp_pr_review                // Quality assessment  
// PHASE 3: mcp_pr-agent-mcp_pr_analyze               // Technical analysis
// PHASE 4: mcp_pr-agent-mcp_pr_improve               // Improvements
// PHASE 5: mcp_pr-agent-mcp_pr_ask                   // Clarification

// ‚ö†Ô∏è CRITICAL: Fix ALL issues from ALL phases BEFORE Git Actions
// üö´ AI AGENTS NEVER MERGE - HUMAN ONLY ACTION

## üîÑ INTERACTIVE 5-PHASE MCP WORKFLOW EXAMPLES
```typescript
// Example P360-specific questions for Phase 5 (pr_ask):
"How does this Prisma schema change affect existing campaign data migration?"
"Why was this specific database indexing strategy chosen for multi-tenant performance?"
"How does this component integrate with the existing Figma design system tokens?"
"What is the performance impact of this change on large campaign datasets?"
"How does this authentication change maintain backward compatibility?"
"What testing strategy covers the multi-environment deployment (dev/UAT/QA)?"
```

// Design Integration  
mcp_figma-mcp_get_figma_data               // Get Figma specs
mcp_figma-mcp_figma_tokens_to_p360_theme  // Extract tokens

// Documentation (Confluence uses HTML, NOT Markdown)
mcp_confluence-mcp_confluence_create_page  // Create docs (use HTML: <h1>, <h2>, <strong>, <ul>, <li>)
mcp_confluence-mcp_confluence_update_page  // Update docs (use HTML formatting)
mcp_confluence-mcp_confluence_search       // Find existing docs

// Test Management
mcp_kiwi_list_products                     // List test products
mcp_kiwi_create_case                       // Create test cases
```

## üê≥ DOCKER ENVIRONMENTS
```bash
# Local Development (6600/6601)
npm run dev:frontend && npm run dev:backend

# UAT Environment (6500/6501) 
npm run docker:uat

# QA/CI Environment (6700/6701)
npm run docker:test
```

## ‚úÖ QUALITY STANDARDS (Developer Excellence)
- **Performance**: <2s page loads, optimized bundles, database query optimization
- **Security**: Authentication, data protection, XSS/CSRF protection, sensitive field protection (@hide)
- **Maintainability**: Clean code, modular architecture, TypeScript type safety
- **Extensibility**: Multi-tenant architecture, campaign feature extensibility
- **Testing**: >90% coverage, unit/integration/E2E, Kiwi-TCMS integration
- **Architecture**: Prisma best practices, Docker deployment readiness, port compliance
- **Design**: Figma design system compliance, responsive design patterns
- **Documentation**: Confluence for features (HTML format required), comprehensive inline documentation

## üìã DEFINITION OF DONE (Excellence Standards)
- [ ] JIRA story ‚Üí In Progress ‚Üí Done with PR link
- [ ] All acceptance criteria implemented & tested
- [ ] **5-Phase MCP Review COMPLETE**: describe ‚Üí review ‚Üí analyze ‚Üí improve ‚Üí ask
- [ ] **ALL review feedback addressed**: Security, performance, maintainability issues fixed
- [ ] Unit, integration, E2E tests passing (>90% coverage)
- [ ] **CI/CD ALL GREEN**: 100% successful checks before merge
- [ ] Kiwi-TCMS test cases executed and documented
- [ ] Confluence documentation updated with technical details (HTML format required)
- [ ] **HUMAN-APPROVED MERGE**: AI agents prepare, humans execute merge
- [ ] Production deployment verified

---

## üìù CONFLUENCE FORMATTING REQUIREMENTS

### **‚ö†Ô∏è CRITICAL: Confluence uses HTML, NOT Markdown**

#### **‚úÖ Correct Confluence HTML Syntax:**
```html
<h1>Main Title</h1>
<h2>Section Header</h2>
<h3>Subsection</h3>
<p><strong>Bold Text</strong></p>
<p><em>Italic Text</em></p>
<ul>
  <li>Bullet point</li>
  <li>Another point</li>
</ul>
<ol>
  <li>Numbered item</li>
  <li>Next item</li>
</ol>
<p><a href="URL">Link Text</a></p>
<pre><code>Code block content</code></pre>
```

#### **‚ùå Wrong (Markdown will display literally):**
```markdown
# Title          ‚Üí displays as: # Title
## Header        ‚Üí displays as: ## Header  
**Bold**         ‚Üí displays as: **Bold**
- List item      ‚Üí displays as: - List item
```

#### **‚úÖ Correct (HTML renders properly):**
```html
<h1>Title</h1>           ‚Üí renders as large title
<h2>Header</h2>          ‚Üí renders as section header
<strong>Bold</strong>    ‚Üí renders as Bold
<ul><li>List item</li></ul> ‚Üí renders as ‚Ä¢ List item
```

---
**P360 Enterprise SDLC ensures quality, security, and maintainability with full MCP integration.**
