version: '3.8'
# P360 Docker Compose - Production Ready
# =====================================
# Complete Docker setup for P360 with fixed P360-67 campaigns UI
# Includes frontend, backend services, database, and development tools

# Docker Compose file for P360

services:
  # P360 Frontend - Next.js 14 with Fixed Campaigns UI
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "6500:6500"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=6500
      - HOSTNAME=0.0.0.0
    volumes:
      # Mount Figma assets for development
      - ./assets:/app/assets:ro
      # Mount figma_data for design reference
      - ./figma_data:/app/figma_data:ro
    networks:
      - p360-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6500"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "com.p360.service=frontend"
      - "com.p360.description=P360 Frontend with fixed P360-67 campaigns UI"

  # P360 Backend - Node.js Express API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "6501:6501"
    environment:
      - NODE_ENV=production
      - PORT=6501
      - DATABASE_URL=postgresql://p360_user:p360_pass@postgres:5432/p360_prod
      - REDIS_URL=redis://redis:6502
      - JWT_SECRET=production-jwt-secret-change-in-production
    networks:
      - p360-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    labels:
      - "com.p360.service=backend"
      - "com.p360.description=P360 Backend API (placeholder)"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "6503:5432"
    environment:
      POSTGRES_DB: p360_prod
      POSTGRES_USER: p360_user
      POSTGRES_PASSWORD: p360_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - p360-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U p360_user -d p360_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.p360.service=database"
      - "com.p360.description=PostgreSQL database for P360"

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6502:6379"
    command: redis-server --appendonly yes --requirepass p360_redis_pass
    volumes:
      - redis_data:/data
    networks:
      - p360-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "p360_redis_pass", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      - "com.p360.service=cache"
      - "com.p360.description=Redis cache for sessions and data"

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - p360-network
    depends_on:
      - frontend
    restart: unless-stopped
    profiles:
      - production
    labels:
      - "com.p360.service=proxy"
      - "com.p360.description=Nginx reverse proxy for P360"

# Networks
networks:
  p360-network:
    driver: bridge
    labels:
      - "com.p360.network=main"
      - "com.p360.description=Main network for P360 services"

# Volumes
volumes:
  postgres_data:
    driver: local
    labels:
      - "com.p360.volume=database"
      - "com.p360.description=PostgreSQL data volume"
  
  redis_data:
    driver: local
    labels:
      - "com.p360.volume=cache"
      - "com.p360.description=Redis data volume"

# Health check for the entire stack
x-healthcheck: &healthcheck
  healthcheck:
    interval: 30s
    timeout: 10s
    retries: 3