# P360 Cursor Rules - Enterprise SDLC with MCP Integration
# =======================================================
# Comprehensive development guidelines integrating:
# - SDLC Process, JIRA, Confluence, Kiwi-TCMS, Git, Figma, GitHub Actions, Docker

## üéØ CORE DEVELOPMENT PRINCIPLES

### 1. MANDATORY SDLC PROCESS
- **NEVER start coding without a JIRA story**
- Always follow: Story ‚Üí Implementation ‚Üí Tests ‚Üí PR ‚Üí Review ‚Üí Merge
- Use MCP tools to interact with JIRA, Confluence, and Kiwi-TCMS
- Update story status and add comments throughout development

### 2. JIRA STORY WORKFLOW (Using MCP)
```
1. Search existing stories: `mcp_jira-orengrinker_search_issues`
2. Get story details: `mcp_jira-orengrinker_get_issue_details`
3. Transition to "In Progress": `mcp_jira-orengrinker_transition_issue`
4. Add implementation comments: `mcp_jira-orengrinker_add_comment`
5. Link to PR when complete: Update story with PR link
```

### 3. FIGMA INTEGRATION (Using MCP)
- Use `mcp_figma-mcp_get_figma_data` for design specifications
- Handle stale node IDs with smart fallback scripts
- Always implement pixel-perfect designs from Figma
- Update FIGMA_NODE_ID in .env when needed

## üèóÔ∏è CODE STRUCTURE & STANDARDS

### 4. COMPONENT ARCHITECTURE
```typescript
// P360 Component Structure
export interface ComponentProps {
  // Props with clear TypeScript types
}

export const ComponentName: React.FC<ComponentProps> = ({ props }) => {
  // Component implementation following P360 patterns
  return (
    <div className="p360-component-class">
      {/* Component content */}
    </div>
  );
};

export default ComponentName;
```

### 5. TESTING REQUIREMENTS (Kiwi-TCMS Integration)
- **Every component MUST have tests**
- Create corresponding test cases in Kiwi-TCMS
- Test file naming: `ComponentName.test.tsx`
- Integration tests: `PageName.test.tsx`
- Use MCP to manage test execution status

### 6. FILE ORGANIZATION
```
frontend/src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ [feature]/          # Feature-based components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Component.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Component.test.tsx
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ [route]/           # App Router pages
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.tsx
tests/
‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îî‚îÄ‚îÄ [feature]/
‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ [feature]/
‚îî‚îÄ‚îÄ e2e/
    ‚îî‚îÄ‚îÄ [feature]/
```

## üîÑ GIT WORKFLOW

### 7. BRANCH NAMING CONVENTION
```bash
# Feature branches
feature/P360-{STORY_NUMBER}-{brief-description}

# Bug fixes  
bugfix/P360-{STORY_NUMBER}-{brief-description}

# Hotfixes
hotfix/P360-{STORY_NUMBER}-{brief-description}
```

### 8. COMMIT MESSAGE FORMAT
```
P360-{STORY_NUMBER}: {Brief summary}

- {Detailed change 1}
- {Detailed change 2}
- {Detailed change 3}

Addresses P360-{STORY_NUMBER} acceptance criteria:
‚úÖ {Criterion 1}
‚úÖ {Criterion 2}
‚úÖ {Criterion 3}
```

### 9. PR REQUIREMENTS
- **Title**: `P360-{STORY_NUMBER}: {Story Title} - Complete Implementation`
- **Description**: Must include:
  - JIRA story reference
  - Implementation summary
  - Acceptance criteria checklist
  - Test coverage details
  - SDLC compliance confirmation
  - Testing instructions

## üß™ TESTING STRATEGY

### 10. TEST COVERAGE REQUIREMENTS
```typescript
// Unit Tests - MANDATORY
describe('ComponentName - P360-{STORY_NUMBER}', () => {
  it('meets acceptance criteria requirements', () => {
    // Test implementation
  });
  
  it('handles edge cases correctly', () => {
    // Edge case testing
  });
  
  it('provides accessible user experience', () => {
    // Accessibility testing
  });
});

// Integration Tests - MANDATORY
describe('PageName Integration - P360-{STORY_NUMBER}', () => {
  it('complete user workflow functions correctly', () => {
    // End-to-end workflow testing
  });
});
```

### 11. KIWI-TCMS INTEGRATION
- Map every test to Kiwi-TCMS test cases
- Update test execution status via MCP tools
- Link code tests to TCMS test plans
- Generate test reports for stakeholders

## üìä MCP TOOL USAGE

### 12. JIRA MCP COMMANDS
```typescript
// Essential JIRA operations
mcp_jira-orengrinker_search_issues         // Find existing stories
mcp_jira-orengrinker_get_issue_details     // Get story requirements
mcp_jira-orengrinker_transition_issue      // Update story status
mcp_jira-orengrinker_add_comment          // Add progress updates
mcp_jira-orengrinker_create_issue         // Create new stories (if needed)
```

### 13. CONFLUENCE MCP COMMANDS
```typescript
// Documentation management
mcp_confluence-mcp_confluence_create_page     // Create documentation
mcp_confluence-mcp_confluence_update_page     // Update existing docs
mcp_confluence-mcp_confluence_search          // Find existing documentation
mcp_confluence-mcp_confluence_upload_document // Upload attachments
```

### 14. FIGMA MCP COMMANDS
```typescript
// Design integration
mcp_figma-mcp_get_figma_data                 // Get design specifications
mcp_figma-mcp_figma_tokens_to_p360_theme    // Extract design tokens
mcp_figma-mcp_figma_component_to_p360_mapping // Generate components
```

### 15. KIWI-TCMS MCP COMMANDS
```typescript
// Test management
mcp_kiwi-tcms-mcp_kiwi_list_products        // List test products
mcp_kiwi-tcms-mcp_kiwi_list_plans           // Get test plans
mcp_kiwi-tcms-mcp_kiwi_list_cases           // Find test cases
mcp_kiwi-tcms-mcp_kiwi_get_case             // Get test case details
```

## üê≥ DOCKER & DEPLOYMENT

### 16. CONTAINERIZATION STANDARDS
```dockerfile
# Use multi-stage builds for optimization
# Follow P360 Docker patterns in docker-compose.simple.yml
# Environment-specific configurations
# Health checks for all services
```

### 17. ENVIRONMENT CONFIGURATION
```bash
# Development: ports 7600/7601
# Kiwi-TCMS: port 40000
# Database: standard PostgreSQL configuration
# Redis: standard configuration
```

## üöÄ GITHUB ACTIONS CI/CD

### 18. AUTOMATED WORKFLOWS
```yaml
# Required checks before merge:
- Linting (ESLint, TypeScript)
- Unit tests (Jest)
- Integration tests (Playwright)
- Docker build validation
- Security scanning
- Performance testing
```

### 19. DEPLOYMENT PIPELINE
```yaml
# Automated deployment stages:
1. Code quality checks
2. Test execution
3. Docker image building
4. Staging deployment
5. Production deployment (manual approval)
```

## üìã CODE QUALITY STANDARDS

### 20. LINTING & FORMATTING
```json
// .eslintrc.js configuration
// Prettier formatting
// TypeScript strict mode
// Import organization
// Consistent naming conventions
```

### 21. PERFORMANCE REQUIREMENTS
- Components must load within 2 seconds
- Bundle size optimization
- Image optimization
- Code splitting implementation
- Lazy loading for non-critical components

### 22. ACCESSIBILITY STANDARDS
- WCAG 2.1 AA compliance
- Keyboard navigation support
- Screen reader compatibility
- Color contrast ratios
- Focus management

## üîê SECURITY PRACTICES

### 23. SECURE CODING
- Input validation and sanitization
- XSS prevention
- CSRF protection
- Secure authentication flows
- API security best practices

### 24. DEPENDENCY MANAGEMENT
- Regular dependency updates
- Security vulnerability scanning
- License compliance checking
- Audit trail for dependency changes

## üìñ DOCUMENTATION REQUIREMENTS

### 25. CONFLUENCE DOCUMENTATION
- Technical specifications for each feature
- API documentation
- User guides and workflows
- Architecture decision records (ADRs)
- Deployment and maintenance guides

### 26. CODE DOCUMENTATION
```typescript
/**
 * P360-{STORY_NUMBER}: Component Description
 * 
 * Implements {story requirements}
 * 
 * @param props - Component properties
 * @returns JSX element
 * 
 * @example
 * <ComponentName prop1="value1" prop2="value2" />
 */
```

## üé® DESIGN SYSTEM INTEGRATION

### 27. COMPONENT CONSISTENCY
- Use P360 design tokens from Figma
- Consistent spacing, colors, typography
- Reusable component patterns
- Theme system integration

### 28. RESPONSIVE DESIGN
- Mobile-first approach
- Tablet optimization
- Desktop enhancement
- Cross-browser compatibility

## üîç MONITORING & OBSERVABILITY

### 29. ERROR TRACKING
- Comprehensive error handling
- User-friendly error messages
- Error reporting and monitoring
- Performance metrics tracking

### 30. LOGGING STANDARDS
```typescript
// Structured logging format
console.log('P360-{STORY_NUMBER}: {Event description}', {
  component: 'ComponentName',
  action: 'user_action',
  metadata: { /* relevant data */ }
});
```

## ‚úÖ DEFINITION OF DONE CHECKLIST

### 31. STORY COMPLETION CRITERIA
- [ ] JIRA story transitioned through all states
- [ ] All acceptance criteria implemented and tested
- [ ] Unit and integration tests written and passing
- [ ] Code review completed and approved
- [ ] Documentation updated in Confluence
- [ ] Kiwi-TCMS test cases executed and passed
- [ ] Performance and accessibility validated
- [ ] Security review completed
- [ ] Deployment to staging successful
- [ ] Stakeholder sign-off received

## üö® MANDATORY PRACTICES

### 32. BEFORE STARTING ANY WORK
1. Search JIRA for existing related stories
2. Review Figma designs for requirements
3. Check Confluence for existing documentation
4. Verify test coverage in Kiwi-TCMS
5. Create feature branch following naming convention
6. Transition JIRA story to "In Progress"

### 33. DURING DEVELOPMENT
1. Implement following Figma designs exactly
2. Write tests as you develop (TDD approach)
3. Update JIRA story with progress comments
4. Commit frequently with meaningful messages
5. Run linters and tests before each commit

### 34. BEFORE CREATING PR
1. Run full test suite locally
2. Verify no linting errors
3. Check responsive design on multiple devices
4. Validate accessibility compliance
5. Update documentation if needed
6. Add comprehensive PR description

### 35. AFTER PR APPROVAL
1. Transition JIRA story to "Done"
2. Update Kiwi-TCMS test execution status
3. Merge using squash and merge
4. Delete feature branch
5. Verify deployment to staging
6. Monitor for any issues

---

## üéØ SUCCESS METRICS

- **SDLC Compliance**: 100% of work items follow proper workflow
- **Test Coverage**: >90% code coverage with meaningful tests
- **Documentation**: All features documented in Confluence
- **Performance**: Page load times <2 seconds
- **Quality**: Zero critical bugs in production
- **User Experience**: WCAG 2.1 AA compliance

---

**Remember: These rules ensure P360 maintains enterprise-grade quality, security, and maintainability while leveraging all integrated tools effectively.**
